// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'task.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 8507534850230926164),
    name: 'SubTask',
    lastPropertyId: const obx_int.IdUid(4, 1196409317237489327),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4239691237618410052),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4251398861730738385),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1752139368188473736),
        name: 'isCompleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1196409317237489327),
        name: 'taskId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 5648481068163372223),
        relationTarget: 'Task',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 1513006411402825883),
    name: 'Task',
    lastPropertyId: const obx_int.IdUid(6, 3401119819664899552),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 9108439889875358351),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5107247500852504574),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8374394710847802849),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1506354194363624374),
        name: 'isCompleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4874242555977929536),
        name: 'deadline',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'subTasks',
        srcEntity: 'SubTask',
        srcField: 'task',
      ),
    ],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 1513006411402825883),
    lastIndexId: const obx_int.IdUid(1, 5648481068163372223),
    lastRelationId: const obx_int.IdUid(1, 5372381370320220683),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [3401119819664899552],
    retiredRelationUids: const [5372381370320220683],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    SubTask: obx_int.EntityDefinition<SubTask>(
      model: _entities[0],
      toOneRelations: (SubTask object) => [object.task],
      toManyRelations: (SubTask object) => {},
      getId: (SubTask object) => object.id,
      setId: (SubTask object, int id) {
        object.id = id;
      },
      objectToFB: (SubTask object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addBool(2, object.isCompleted);
        fbb.addInt64(3, object.task.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final isCompletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final object = SubTask(title: titleParam, isCompleted: isCompletedParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.task.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.task.attach(store);
        return object;
      },
    ),
    Task: obx_int.EntityDefinition<Task>(
      model: _entities[1],
      toOneRelations: (Task object) => [],
      toManyRelations:
          (Task object) => {
            obx_int.RelInfo<SubTask>.toOneBacklink(
                  4,
                  object.id,
                  (SubTask srcObject) => srcObject.task,
                ):
                object.subTasks,
          },
      getId: (Task object) => object.id,
      setId: (Task object, int id) {
        object.id = id;
      },
      objectToFB: (Task object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final descriptionOffset = fbb.writeString(object.description);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, descriptionOffset);
        fbb.addBool(3, object.isCompleted);
        fbb.addInt64(4, object.deadline?.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final deadlineValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final isCompletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final deadlineParam =
            deadlineValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(deadlineValue);
        final object = Task(
          title: titleParam,
          description: descriptionParam,
          isCompleted: isCompletedParam,
          deadline: deadlineParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        obx_int.InternalToManyAccess.setRelInfo<Task>(
          object.subTasks,
          store,
          obx_int.RelInfo<SubTask>.toOneBacklink(
            4,
            object.id,
            (SubTask srcObject) => srcObject.task,
          ),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [SubTask] entity fields to define ObjectBox queries.
class SubTask_ {
  /// See [SubTask.id].
  static final id = obx.QueryIntegerProperty<SubTask>(
    _entities[0].properties[0],
  );

  /// See [SubTask.title].
  static final title = obx.QueryStringProperty<SubTask>(
    _entities[0].properties[1],
  );

  /// See [SubTask.isCompleted].
  static final isCompleted = obx.QueryBooleanProperty<SubTask>(
    _entities[0].properties[2],
  );

  /// See [SubTask.task].
  static final task = obx.QueryRelationToOne<SubTask, Task>(
    _entities[0].properties[3],
  );
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// See [Task.id].
  static final id = obx.QueryIntegerProperty<Task>(_entities[1].properties[0]);

  /// See [Task.title].
  static final title = obx.QueryStringProperty<Task>(
    _entities[1].properties[1],
  );

  /// See [Task.description].
  static final description = obx.QueryStringProperty<Task>(
    _entities[1].properties[2],
  );

  /// See [Task.isCompleted].
  static final isCompleted = obx.QueryBooleanProperty<Task>(
    _entities[1].properties[3],
  );

  /// See [Task.deadline].
  static final deadline = obx.QueryDateProperty<Task>(
    _entities[1].properties[4],
  );

  /// see [Task.subTasks]
  static final subTasks = obx.QueryBacklinkToMany<SubTask, Task>(SubTask_.task);
}
